version: "3.7"
services:
  selenoid:
    image: aerokube/selenoid:latest-release
    volumes:
      - "${PWD}/init/selenoid:/etc/selenoid"
      - "${PWD}/working/selenoid/video:/opt/selenoid/video"
      - "${PWD}/working/selenoid/logs:/opt/selenoid/logs"
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - OVERRIDE_VIDEO_OUTPUT_DIR=work/selenoid/video
    command: [ "-conf", "/etc/selenoid/browsers.json", "-video-output-dir", "/opt/selenoid/video", "-log-output-dir", "/opt/selenoid/logs" ]
    ports:
      - 4444:4444
    network_mode: bridge
  selenoid-ui:
    image: aerokube/selenoid-ui:latest-release
    network_mode: bridge
    links:
        - selenoid
    ports:
        - 8082:8080
    command: ["--selenoid-uri", "http://selenoid:4444"]
#  jenkins:
#    image: jenkins/jenkins:lts
#    volumes:
#        - "C:/QA_AUTOMATION/MFTV_Web_Desktop_Smoke_JUnit5_only/work/jenkins:/var/jenkins_home"
#    ports:
#        - 8085:8080
#    network_mode: bridge
  ui:
    image: visualregressiontracker/ui:4.18.0
    ports:
      - "${PORT}:8080"
    # https config
    #   - "443:443"
    # volumes:
    #   - ./ssl/ssl.cert:/etc/nginx/secrets/ssl.cert
    #   - ./ssl/ssl.key:/etc/nginx/secrets/ssl.key
    #   - ./ssl/default.conf:/etc/nginx/conf.d/default.conf
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
    restart: always
  api:
    image: visualregressiontracker/api:4.18.0
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_LIFE_TIME: ${JWT_LIFE_TIME}
      APP_FRONTEND_URL: ${APP_FRONTEND_URL}
      BODY_PARSER_JSON_LIMIT: ${BODY_PARSER_JSON_LIMIT}
    ports:
      - "${APP_PORT}:3000"
    volumes:
      - ./imageUploads:/imageUploads
      # https config
      # - ./ssl/ssl.cert:/secrets/ssl.cert
      # - ./ssl/ssl.key:/secrets/ssl.key
    depends_on:
      - postgres
    restart: always
  migration:
    image: visualregressiontracker/migration:4.18.0
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure
  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    expose:
      - "${POSTGRES_PORT}"
    volumes:
      - ./db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 120s
      retries: 10
